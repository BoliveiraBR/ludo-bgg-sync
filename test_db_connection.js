const { Client } = require('pg');
require('dotenv').config();

async function testDatabaseConnection() {
    console.log('üîó Testando conex√£o com o banco PostgreSQL...');
    
    // Criar cliente PostgreSQL
    const client = new Client({
        connectionString: process.env.DATABASE_URL,
        ssl: {
            rejectUnauthorized: false // Necess√°rio para RDS
        }
    });
    
    try {
        // Conectar ao banco
        console.log('‚è≥ Conectando...');
        await client.connect();
        console.log('‚úÖ Conex√£o estabelecida com sucesso!');
        
        // Testar query simples
        console.log('üîç Executando query de teste...');
        const result = await client.query('SELECT NOW() as current_time, version() as db_version');
        
        console.log('üìä Resultado do teste:');
        console.log('  - Hor√°rio atual:', result.rows[0].current_time);
        console.log('  - Vers√£o do PostgreSQL:', result.rows[0].db_version.split(' ')[0]);
        
        // Testar cria√ß√£o de tabela simples
        console.log('üèóÔ∏è  Testando cria√ß√£o de tabela...');
        await client.query(`
            CREATE TABLE IF NOT EXISTS connection_test (
                id SERIAL PRIMARY KEY,
                test_time TIMESTAMP DEFAULT NOW(),
                message TEXT
            )
        `);
        console.log('‚úÖ Tabela de teste criada com sucesso!');
        
        // Inserir dados de teste
        console.log('üìù Inserindo dados de teste...');
        await client.query(
            'INSERT INTO connection_test (message) VALUES ($1)',
            ['Teste de conex√£o realizado com sucesso!']
        );
        
        // Ler dados de teste
        const testData = await client.query('SELECT * FROM connection_test ORDER BY test_time DESC LIMIT 1');
        console.log('üìñ Dados inseridos:', testData.rows[0]);
        
        // Limpar tabela de teste
        console.log('üßπ Limpando dados de teste...');
        await client.query('DROP TABLE IF EXISTS connection_test');
        console.log('‚úÖ Limpeza conclu√≠da!');
        
        console.log('\nüéâ TESTE COMPLETO: Banco PostgreSQL est√° funcionando perfeitamente!');
        
    } catch (error) {
        console.error('‚ùå Erro na conex√£o com o banco:');
        console.error('  - Tipo:', error.name);
        console.error('  - Mensagem:', error.message);
        console.error('  - C√≥digo:', error.code);
        
        if (error.code === 'ENOTFOUND') {
            console.error('üîç Poss√≠vel problema: Host do banco n√£o encontrado');
        } else if (error.code === 'ECONNREFUSED') {
            console.error('üîç Poss√≠vel problema: Conex√£o recusada (firewall/security group)');
        } else if (error.code === '28P01') {
            console.error('üîç Poss√≠vel problema: Credenciais inv√°lidas');
        }
        
        process.exit(1);
    } finally {
        // Fechar conex√£o
        await client.end();
        console.log('üîå Conex√£o fechada.');
    }
}

// Executar teste
testDatabaseConnection();
