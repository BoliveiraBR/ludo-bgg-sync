require('dotenv').config();
const fs = require('fs');
const { Configuration, OpenAIApi } = require("openai");

function loadBGGCollectionFromFile() {
  try {
    let data = fs.readFileSync('BGGCollection.txt', { encoding: 'utf8' });
    data = data.replace(/^\uFEFF/, '');
    return JSON.parse(data);
  } catch (error) {
    console.error('❌ Erro ao carregar BGGCollection.txt:', error.message);
    return [];
  }
}

function loadLudopediaCollectionFromFile() {
  try {
    let data = fs.readFileSync('LudopediaCollection.txt', { encoding: 'utf8' });
    data = data.replace(/^\uFEFF/, '');
    return JSON.parse(data);
  } catch (error) {
    console.error('❌ Erro ao carregar LudopediaCollection.txt:', error.message);
    return [];
  }
}

function getBaseNames(collection, typeKey, typeValue) {
  return collection
    .filter(item => item[typeKey] === typeValue)
    .map(item => item.name.trim());
}

async function buscarMatchesViaChatGPT(onlyInBGG, onlyInLudo) {
  const configuration = new Configuration({
    apiKey: process.env.OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(configuration);

  const prompt = `
Você é um especialista em jogos de tabuleiro. Compare as duas listas de nomes de jogos abaixo. 
Identifique jogos que são o mesmo, apesar de estarem com nomes diferentes (por exemplo, um nome traduzido ou com pequenas variações).
Retorne a resposta:
"matches": uma lista de pares de jogos que são o mesmo (com o nome da Ludopedia e o nome do BGG);

Exemplo de resposta:
{
  "matches": [["Jogo A Ludopedia", "Jogo A BGG"], ["Jogo B Ludopedia", "Jogo B BGG"]]
}

Ludopedia: ${JSON.stringify(onlyInLudo)}
BGG: ${JSON.stringify(onlyInBGG)}
`;

  try {
    const response = await openai.createChatCompletion({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.2,
    });

    const matchResponse = response.data.choices[0].message.content;
    const parsed = JSON.parse(matchResponse);
    return parsed.matches || [];
  } catch (error) {
    console.error("❌ Erro ao buscar matches via ChatGPT:", error.message);
    return [];
  }
}

async function main() {
  const bggCollection = loadBGGCollectionFromFile();
  const ludoCollection = loadLudopediaCollectionFromFile();

  const bggNames = getBaseNames(bggCollection, 'subtype', 'base');
  const ludoNames = getBaseNames(ludoCollection, 'type', 'base');

  const bggSet = new Set(bggNames.map(n => n.toLowerCase()));
  const ludoSet = new Set(ludoNames.map(n => n.toLowerCase()));

  const onlyInBGG = bggNames.filter(n => !ludoSet.has(n.toLowerCase()));
  const onlyInLudo = ludoNames.filter(n => !bggSet.has(n.toLowerCase()));

  const matches = await buscarMatchesViaChatGPT(onlyInBGG, onlyInLudo);

  if (matches.length > 0) {
    const outputLines = ['🔁 Matches sugeridos via ChatGPT:'];
    matches.forEach(([ludoName, bggName]) => {
      outputLines.push(`- ${ludoName} ⇄ ${bggName}`);
    });
    fs.writeFileSync('ChatGPTMatches.txt', '\uFEFF' + outputLines.join('\n'), { encoding: 'utf8' });
    console.log('📄 Resultado salvo em ChatGPTMatches.txt');
  } else {
    console.log('⚠️ Nenhum match sugerido pelo ChatGPT.');
  }
}

main();